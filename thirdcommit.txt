重新开始学习c语言
指针与数组
指针运算
1.指针变量指向数组元素时，指针变量加或者减去一个数m，表示指针向前或者向后移动一个元素而不是字节
2.两个同类型指针可以相减，得到一个整数，为二者之间相差的元素个数，只能进行相减，不能想加、乘、除
3。两类型指针可以进行比较运算，比较也是他们的地址进行比较
指针访问数组元组
1、数组指针指向的是数组，数组指针中存放的应该是数组的地址。
b[j]、*(b+j)、p[j]、*(p+j) 都表示b中j的元素
而p+j 或者a+j表示b[j]的地址、
int main()
{
	int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
	int *p=a;
	for(int i=0;i<4;i++)
	printf("%d "*(p+1));\\count<<*(p+i)<<" ";
}
a、指向元素的指针
    int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}}; 
    int *p=&a[0][0];
   在这种定义方式下，对于数组元素的访问就需要一个个元素往后推   ，结合本文开头所说的，二维数组是按行优先存储的，第i行第j列元   素实际上是整个二维数组中的第i*c+j个元素，其中c为二维数组的   列数，相对于第一个元素，第i*c+j个元素的地址偏移量为4*(i*c+j)  ，而由于p为int指针，p+x的地址偏移量为p+4*x，因此a[i][j]=*    (p+i*c+j)。
b、 指向每一行的指针（指针数组方式）
     这种方式是定义指针来指向二维数组的某一行，定义方式如下：
     int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}}; 
     int *p=a[0];
     int *p=a[0][2];
     如果p直接指向a，则p指向的是p0那一整行，不是一个整型变量，    但是如果让p指向a[0]，实际上就相当于指向a[0]的第一个元素，也   就是a[0][0]是整形变量，因此让p指向a[0]是可以的。
      当然，也可以让p指向a[1]、a[2].....如果让p指向第i行，那么此时    的p+j就相当于是一维数组中第j个元素的地址了，即p+j就指向了  a[i][j]。
      综上最合适的方法如下：
   int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
   int *p[3];
   for(int i=0;i<3;i++)
   p[i]=a[i];

   p[i]即指向数组的第i行，也就是a[i][0]，知道了a[i][0]的地址，要想  访问a[i][j]，地址即是a[i][0]+4*j，这里由于p[i]是int型的指针变量，  因此刚好就等于p[i]+j，即a[i][j]=*(p[i]+j)。这就是一种定义指向二  维数组的指针的方式，这里的p是以指针作为元素的数组，也就是指  针数组。
使用此方法一定要知道二维数组的行数！！！



2、数组指针是 指向数组的指针，所以把数组的地址赋给指针，让指针指向这个数组，但是一般很少写这样的代码
  指向整个数组的指针
    int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
    int (*p)[4]=a;
   把*p用b去替换掉，就成了b[4]，这里的b就很明显了，就是一个有   个元素的数组的首地址，那么这里的p的含义也就不难得出了：指   向一个有四个元素的数组的首地址，尤其需要注意的是，这里p是指   向首地址，并非就是首地址，*p才是首地址，也就是指向第一个元   素，因此这里的p也就是指向指针的指针。在int (*p)[4]=a中，p就   是指向了第一个含四个元素的数组的首地址，也就是p指向a的首地   址也就是a[0]，*p指向a[0]的首地址也就是a[0][0]，要访问a[0][0]  ，就就是*(*p)了；

总结：
指针数组：指针的数组，表示一个数组，并且数组的每一个元素都是指针类型。
数组指针：数组的指针，表示一个指针，并且是指向数组的指针。
