学生信息管理
#include<stdio.h>
#include<string.h>
#include<stdlib.h> 
#define N 10
typedef struct node
{   int num;
    int cla;
	char name[30];
	struct node *next;
}Node,*LinkList;
int f=0; 
//输入 
LinkList createlist(int n)
{ int i;
  LinkList head,pre,p;
  head=pre=(LinkList)malloc(sizeof(Node));
  for(i=0;i<3;i++)
  { p=(LinkList)malloc(sizeof(Node));
    scanf("%s %d %d",p->name,&p->num,&p->cla);
    pre->next=p;
	pre=p;
  }
  pre->next=NULL;
  return head;
}

//输出 链表所有信息 
void output(LinkList head)
{int i;
	LinkList p,pre;
	pre=p=head->next;
 while(p!=NULL)
{
 
for(i=0;i<3;i++)
   {
   printf("%s\t%d\t%d\t",p->name,p->num,p->cla);
    pre=pre->next;
    p=pre;
   }
 }
printf("\n");
}

// 根据名字查找 ，返回学号和班级 
int search(LinkList head)
{LinkList p;
  int k=0;
  char m[30];
  scanf("%s",m);
 p=head->next;
 while(p!=NULL)
 {
	 if(!strcmp(p->name,m))
		 { printf("%d\t%d\t",p->num,p->cla);k=1;}
	 p=p->next;
  }
 if(k==0) printf("NULL!");
 printf("\n");
}

//根据指定位置，返回学生信息 
Node* mm (LinkList head,int i)
{ int j;
  LinkList p,s;
  p=head;
  j=0;
  while(p!=NULL&&j<i)
  {
   p=p->next;
   j++;
  }
    if(!p||j>i&&f==0)
    return NULL;
    if(j==i&&f==0)
		printf("学号:%d\t班级:%d\t姓名:%s\n",p->num,p->cla,p->name);
  if(j==i&&f==1)
		return p;
	
printf("\n");
   
} 
//给定一个学生信息，插入到指定位置 
int  add(LinkList head,int i)
 {  Node *p,*s;int k=0;
 f=1;
 p=mm( head, i-1);
  if(p==NULL)
	   printf("插入失败\n");
else{
    k=1;	   
    s=(Node*)malloc(sizeof(Node));//s新申请的结点 	
	printf("请输入要插入的学号: ");	
	scanf("%d",&s->num);	
    printf("请输入要插入的班级：");	
	scanf("%d",&s->cla);	
    printf("请输入要插入的姓名：");	
	scanf("%s",s->name);
	s->next=p->next;	
    p->next=s;
	}
    while(head->next&&k==1)
	{
	  printf("学号:%d\t班级:%d\t姓名:%s\n",head->next->num,head->next->cla,head->next->name);
    head=head->next;}
   
}
//删除指定位置的学生信息 
 Node*de_LinkList(LinkList head,int m)
{
 int j;
  LinkList p,q;
  p=head; j=1;
  while(p->next!=NULL&&j<m)
  {
  j++; p=p->next;
  }
  if(!p->next||j>m)
   return NULL;
  q=p->next; p->next=q->next;
  free(q);
  return head;
}

int main()
{
   int i,m,a,n,b;
   LinkList head;
   head=createlist(n);
   output( head);
   printf("输入查找的姓名:") ;
   search( head);
   printf("输入指定的位置:");
   scanf("%d",&a);	
   mm(head,a);
   printf("输入插入位置：\n");
   scanf("%d",&i);
  add(head,i);
   scanf("%d",&m);
  printf("删除第%d个学生；\n",m);
   de_LinkList(head,m);
    output(head);
    return 0;
}



中缀表达式转变为后缀表达式
#include<stdio.h>
#include<stdlib.h>
#define MAX 20
#define ADD 10
 typedef char ElemType;
 typedef struct
 { ElemType *base;
   ElemType *top;
   int stackSize;
 }SeqStack;
 SeqStack *s;
 //置空栈 
Init_SeqStack(SeqStack *s)
 { s->base=(ElemType *)malloc(MAX * sizeof(ElemType));
   if(!s->base) return 0;
   s->top=s->base;
   s->stackSize=MAX;
 }
 //入栈 
 push(SeqStack *s,ElemType e)
{ if(s->top-s->base>=s->stackSize)
   {
	s->base=(ElemType *)realloc(s->base,(s->stackSize+ADD)* sizeof(ElemType));
    if(!s->base) return 0;
    s->top=s->base+s->stackSize;
    s->stackSize=s->stackSize+ADD;
   }
   *(s->top)=e;
   s->top++;
}

 //出栈
  pop(SeqStack *s,ElemType *e) 
  { if(s->top==s->base) 
      return 0;
    else {*e=*--(s->top);}
  }
int st(SeqStack s)
{ return (s.top - s.base);
}
int main()
{ SeqStack s;
   char c,e;
   Init_SeqStack(&s);
    scanf("%c",&c) ;
   while(c!='#')
   { while( c>='0' && c<='9' )
        {
            printf("%c", c);
            scanf("%c", &c);
            if( c<'0' || c>'9' )
            {
                printf(" ");
            }
        }
 
        if( ')' == c )
        {
            pop( &s,&e);
            while( '(' != e )
            {
                printf("%c ", e);
                pop(&s,&e) ; 
            }
        }
        else if( '+'==c || '-'==c )
        {
            if( !st(s) )
            {
                push(&s, c);
            }
            else
            {
                do
                {
                    pop(&s,&e) ;
                    if( '(' == e )
                    {
                        push(&s, e);
                    }
                    else
                    {
                        printf("%c ", e);
                    }
                }while( st(s)&& '('!=e );
                push(&s, c);
            }
        }
        else if( '*'==c || '/'==c )
        { 
            if( !st(s) )
            {
                push(&s, c);
            }
            else
            {
                do
                {
                    pop(&s, &e);
                    if( '(' == e || '+'== e || '-'== e )
                    {
                        push(&s, e);
                    }
                    else
                    {
                        printf("%c ", e);
                    }
                }while( st(s) && '('!=e &&'+'!=e && '-'!=e);
                push(&s, c);
            }
		}
        else if( '^'==c || '('==c )
        {
            push(&s, c);
        }
        else if( '#'== c )
        {
            break;
        }
        else
        {
            printf("\n输入错误！\n");
            return -1;
        }
 
        scanf("%c", &c);
    }
 
    while( st(s) )
    {
        pop(&s,&e);
        printf("%c ", e);
    }
 
    return 0;
}
//后缀表达式求值

#include <stdio.h>
#include <stdlib.h>
#define max 100000

typedef struct LINK
{
    int s[ max ];
    int top;
}LINK;

int make_end( char ch , int left, int right )
{
    int num ;
    switch( ch )
    {
        case '+': num = left + right;break;
        case '-': num = left - right;break;
        case '*': num = left * right;break;
        case '/': num = left / right;break;
        case '%': num = left % right;break;
    }
    return num;
}

int main()
{
    char a[ max ];  int i = 0 , b[ max ],j = 0;
    while( ( a[ i ] = getchar() ) != '@' )  i++ ;
    a[ i ] = '\0';  //输入后缀表达式, len = i ;

    int len = i ,num ;   LINK L;  L.top = -1;

    for( i = 0; a[ i ] != '\0'; i++ )
    {
        int temp ;
        if( a[ i ] >= '0' && a[ i ] <= '9' ) //提取数值
        {
            int k = i + 1;
            temp = a[ i ] - '0';
            while( a[ k ] >= '0' && a[ k ] <= '9' )
            {
                temp = 10 * temp + ( a[ k ] - '0') ;
                i++; k++;
            }
            L.top ++;
            L.s[ L.top ] = temp;
        }
        else if( a[ i ] == '+' || a[ i ] == '-' || a[ i ] == '*' || a[ i ] == '/' || a[ i ] == '%' )
        {
            num = make_end( a[i] , L.s[ L.top - 1 ] , L.s[ L.top ] );
            L.s[ L.top - 1 ] = num;
            L.s[ L.top ] = 0;
            L.top -- ;
        }
    }

    printf("%d\n", L.s[ L.top ]);
    return 0;
}

