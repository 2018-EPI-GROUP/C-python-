# 两数之和
  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那**两个**整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。



- 方法一 暴力破解
时间复杂度：O（n^2）执行时间较长。
```python
#定义函数，获取列表和目标值
def twoSum(nums, target):
#获取nums的长度
    lens = len(nums)
    j=-1
#迭代从1到lens
    for i in range(lens):
#如果两数之和为target
        if (target - nums[i]) in nums:
#Python count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。
#如果(target - nums[i])的二倍是target且它只有在列表中只有一，跳到下一循环
            if (nums.count(target - nums[i]) == 1)&(target - nums[i] == nums[i]):
                continue
#Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内
#否则检查与(target - nums[i])相等的项赋值给j
            else:
                j = nums.index(target - nums[i],i+1)
                break
    if j>0:
        return [i,j]
    else:
        return []
```



- 方法二 （简化方法一）
时间复杂度：O（n）执行时间缩短。
```python
#定义函数
def twoSum(nums, target):
    lens = len(nums)
    j=-1
#python range() 函数可创建一个整数列表，一般用在 for 循环中。从1排列到lens - 1。从nums[i]之前的列表里找另一个数，不用for每次遍历。
    for i in range(1,lens):
        temp = nums[:i]
        if (target - nums[i]) in temp:
            j = temp.index(target - nums[i])
            break
    if j>=0:
        return [j,i]

```

- 方法三 用字典模拟哈希求解
时间复杂度：O（n）使用了字典查找，执行时间缩短。
```python
#定义函数
def twoSum(nums, target):
#创建字典
	hashmap={}
#enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。
#将nums列表录入字典
	for ind,num in enumerate(nums):
        hashmap[num] = ind
#字典(Dictionary) get() 函数返回指定键的值，如果值不在字典中返回默认值。
    for i,num in enumerate(nums):
        j = hashmap.get(target - num)
#如果i不等于j
		if j is not None and i!=j:
            return [i,j]
```
- 本题答案参考：
作者：lao-la-rou-yue-jiao-yue-xiang
链接：https://leetcode-cn.com/problems/two-sum/solution/xiao-bai-pythonji-chong-jie-fa-by-lao-la-rou-yue-j/
来源：力扣（LeetCode）

